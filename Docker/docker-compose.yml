# Docker Compose automatically loads .env file from the same directory
# The start.sh script will copy the appropriate env.<whatever> file to .env at runtime

services:
  # MongoDB Database Service (Disabled - using cloud MongoDB)
  # mongodb:
  #   image: mongo:7.0
  #   container_name: scientistcloud_mongodb
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: visstore
  #     MONGO_INITDB_ROOT_PASSWORD: ${DB_PASS}
  #     MONGO_INITDB_DATABASE: ${DB_NAME:-SCLib_Test}
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./mongo-init:/docker-entrypoint-initdb.d
  #   networks:
  #     - scientistcloud_network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # FastAPI Application Service
  fastapi:
    build:
      context: ..
      dockerfile: Docker/Dockerfile.fastapi
    container_name: scientistcloud_fastapi
    restart: unless-stopped
    ports:
      - "5001:5000"
    environment:
      # Database connection
      MONGO_URL: ${MONGO_URL}
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_HOST: ${DB_HOST}
      
      # Auth0 Configuration
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTHO_CLIENT_ID: ${AUTHO_CLIENT_ID}
      AUTHO_CLIENT_SECRET: ${AUTHO_CLIENT_SECRET}
      AUTH0_MANAGEMENT_CLIENT_ID: ${AUTH0_MANAGEMENT_CLIENT_ID}
      AUTH0_MANAGEMENT_CLIENT_SECRET: ${AUTH0_MANAGEMENT_CLIENT_SECRET}
      
      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      AUTH_GOOGLE_CLIENT_ID: ${AUTH_GOOGLE_CLIENT_ID}
      AUTH_GOOGLE_CLIENT_SECRET: ${AUTH_GOOGLE_CLIENT_SECRET}
      
      # Application settings
      SECRET_KEY: ${SECRET_KEY}
      SECRET_IV: ${SECRET_IV}
      FASTAPI_HOST: 0.0.0.0
      FASTAPI_PORT: 5000
      FASTAPI_WORKERS: 1
      FASTAPI_LOG_LEVEL: info
      
      # File processing settings
      JOB_CHUNK_SIZE: ${JOB_CHUNK_SIZE:-10485760}
      JOB_MAX_CONCURRENT_UPLOADS: ${JOB_MAX_CONCURRENT_UPLOADS:-3}
      JOB_UPLOAD_TIMEOUT: ${JOB_UPLOAD_TIMEOUT:-3600}
      LARGE_FILE_THRESHOLD: ${LARGE_FILE_THRESHOLD:-1073741824}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-1099511627776}
      
      # Paths (container paths)
      VISUS_DATASETS: /mnt/visus_datasets
      JOB_IN_DATA_DIR: /mnt/visus_datasets/upload
      JOB_OUT_DATA_DIR: /mnt/visus_datasets/converted
      JOB_SYNC_DATA_DIR: /mnt/visus_datasets/sync
      JOB_AUTH_DATA_DIR: /mnt/visus_datasets/auth
      
      # SCLib Environment
      SCLIB_HOME: /app
      SCLIB_ENV_FILE: /app/.env
      
      # SSL and Domain
      SSL_EMAIL: ${SSL_EMAIL}
      DEPLOY_SERVER: ${DEPLOY_SERVER}
      DOMAIN_NAME: ${DOMAIN_NAME}
    volumes:
      - ../SCLib_JobProcessing:/app
      - ${VISUS_DATASETS}:/mnt/visus_datasets
      - fastapi_logs:/app/logs
    networks:
      - scientistcloud_network
    # depends_on:
    #   mongodb:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional but recommended)
  # nginx:
  #   image: nginx:alpine
  #   container_name: scientistcloud_nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/conf.d:/etc/nginx/conf.d:ro
  #     - nginx_logs:/var/log/nginx
  #     - ./ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - scientistcloud_network
  #   depends_on:
  #     - fastapi
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Redis for background tasks (Optional)
  redis:
    image: redis:7-alpine
    container_name: scientistcloud_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scientistcloud_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  fastapi_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  scientistcloud_network:
    driver: bridge
